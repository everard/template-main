// Copyright Nezametdinov E. Ildus 2024.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// https://www.boost.org/LICENSE_1_0.txt)
//
module; // Global module fragment.
#include <everything>

export module rose.filesystem;

////////////////////////////////////////////////////////////////////////////////
//
// Filesystem query and manipulation.
//
////////////////////////////////////////////////////////////////////////////////

export namespace rose::filesystem {

////////////////////////////////////////////////////////////////////////////////
// Concept definitions.
////////////////////////////////////////////////////////////////////////////////

template <typename T>
concept byte_array_like = requires(T x) {
    {
        std::invoke([]<size_t N>(std::array<std::byte, N> const*) {}, &x)
    };
};

template <typename T>
concept readable = std::same_as<T, std::vector<std::byte>> ||
                   std::same_as<T, std::string> || byte_array_like<T>;

////////////////////////////////////////////////////////////////////////////////
// File size query interface.
////////////////////////////////////////////////////////////////////////////////

auto
obtain_file_size(std::filesystem::path const& path) noexcept
    -> std::expected<size_t, std::error_code> {
    if(auto error = std::error_code{}; true) {
        if(auto file_size = std::filesystem::file_size(path, error); error) {
            return std::unexpected{error};
        } else if(file_size <= std::numeric_limits<size_t>::max()) {
            return static_cast<size_t>(file_size);
        }
    }

    return std::unexpected{std::make_error_code(std::errc::file_too_large)};
}

////////////////////////////////////////////////////////////////////////////////
// Data reading interface.
////////////////////////////////////////////////////////////////////////////////

auto
read(std::istream& stream, std::span<std::byte> bytes)
    -> std::expected<void, std::error_code> {
    if(stream.read(reinterpret_cast<char*>(bytes.data()), bytes.size())) {
        return {};
    } else {
        return std::unexpected{std::make_error_code(std::errc::io_error)};
    }
}

auto
read(std::filesystem::path const& path, std::span<std::byte> bytes)
    -> std::expected<void, std::error_code> {
    if(auto file = std::ifstream(path, std::ios_base::binary); file) {
        return read(file, bytes);
    } else {
        return std::unexpected{
            std::make_error_code(std::errc::no_such_file_or_directory)};
    }
}

template <readable T>
auto
read(std::filesystem::path const& path) -> std::expected<T, std::error_code> {
    if(auto file_size = obtain_file_size(path); file_size) {
        auto bytes = T{};

        // Allocate memory, if needed.
        if constexpr(!byte_array_like<T>) {
            try {
                bytes.resize(*file_size);
            } catch(...) {
                return std::unexpected{
                    std::make_error_code(std::errc::not_enough_memory)};
            }
        }

        // Read data from the file.
        auto result = read(path, std::as_writable_bytes(std::span{bytes}));
        if(!result) {
            return std::unexpected{result.error()};
        }

        return std::move(bytes);
    } else {
        return std::unexpected{file_size.error()};
    }
}

////////////////////////////////////////////////////////////////////////////////
// Data writing interface.
////////////////////////////////////////////////////////////////////////////////

auto
write(std::ostream& stream, std::span<std::byte const> bytes)
    -> std::expected<void, std::error_code> {
    if(stream.write(
           reinterpret_cast<char const*>(bytes.data()), bytes.size())) {
        return {};
    } else {
        return std::unexpected{std::make_error_code(std::errc::io_error)};
    }
}

auto
write(std::filesystem::path const& path, std::span<std::byte const> bytes)
    -> std::expected<void, std::error_code> {
    if(auto file = std::ofstream(path, std::ios_base::binary); file) {
        return write(file, bytes);
    } else {
        return std::unexpected{std::make_error_code(std::errc::io_error)};
    }
}

} // namespace rose::filesystem
