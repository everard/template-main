// Copyright Nezametdinov E. Ildus 2024.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// https://www.boost.org/LICENSE_1_0.txt)
//
module; // Global module fragment.
#include <everything>

export module rose.random;

////////////////////////////////////////////////////////////////////////////////
//
// Random number generator.
//
////////////////////////////////////////////////////////////////////////////////

namespace rose::random {

////////////////////////////////////////////////////////////////////////////////
// Generator state definition.
////////////////////////////////////////////////////////////////////////////////

struct generator_state : std::array<uint32_t, 16> {};

////////////////////////////////////////////////////////////////////////////////
// State vector permutation function.
////////////////////////////////////////////////////////////////////////////////

template <unsigned N>
constexpr auto
permute(generator_state& state) noexcept -> generator_state
    requires((N % 2) == 0) {
    // Define permutation.
    auto shuffle = [](generator_state state) {
        for(auto i = 0U; i != (N / 2); ++i) {
            state[0x4] ^= std::rotl(state[0x0] + state[0xC], 0x07);
            state[0x8] ^= std::rotl(state[0x4] + state[0x0], 0x09);
            state[0xC] ^= std::rotl(state[0x8] + state[0x4], 0x0D);
            state[0x0] ^= std::rotl(state[0xC] + state[0x8], 0x12);
            state[0x9] ^= std::rotl(state[0x5] + state[0x1], 0x07);
            state[0xD] ^= std::rotl(state[0x9] + state[0x5], 0x09);
            state[0x1] ^= std::rotl(state[0xD] + state[0x9], 0x0D);
            state[0x5] ^= std::rotl(state[0x1] + state[0xD], 0x12);
            state[0xE] ^= std::rotl(state[0xA] + state[0x6], 0x07);
            state[0x2] ^= std::rotl(state[0xE] + state[0xA], 0x09);
            state[0x6] ^= std::rotl(state[0x2] + state[0xE], 0x0D);
            state[0xA] ^= std::rotl(state[0x6] + state[0x2], 0x12);
            state[0x3] ^= std::rotl(state[0xF] + state[0xB], 0x07);
            state[0x7] ^= std::rotl(state[0x3] + state[0xF], 0x09);
            state[0xB] ^= std::rotl(state[0x7] + state[0x3], 0x0D);
            state[0xF] ^= std::rotl(state[0xB] + state[0x7], 0x12);
            state[0x1] ^= std::rotl(state[0x0] + state[0x3], 0x07);
            state[0x2] ^= std::rotl(state[0x1] + state[0x0], 0x09);
            state[0x3] ^= std::rotl(state[0x2] + state[0x1], 0x0D);
            state[0x0] ^= std::rotl(state[0x3] + state[0x2], 0x12);
            state[0x6] ^= std::rotl(state[0x5] + state[0x4], 0x07);
            state[0x7] ^= std::rotl(state[0x6] + state[0x5], 0x09);
            state[0x4] ^= std::rotl(state[0x7] + state[0x6], 0x0D);
            state[0x5] ^= std::rotl(state[0x4] + state[0x7], 0x12);
            state[0xB] ^= std::rotl(state[0xA] + state[0x9], 0x07);
            state[0x8] ^= std::rotl(state[0xB] + state[0xA], 0x09);
            state[0x9] ^= std::rotl(state[0x8] + state[0xB], 0x0D);
            state[0xA] ^= std::rotl(state[0x9] + state[0x8], 0x12);
            state[0xC] ^= std::rotl(state[0xF] + state[0xE], 0x07);
            state[0xD] ^= std::rotl(state[0xC] + state[0xF], 0x09);
            state[0xE] ^= std::rotl(state[0xD] + state[0xC], 0x0D);
            state[0xF] ^= std::rotl(state[0xE] + state[0xD], 0x12);
        }

        return state;
    };

    // Compute the result.
    auto result = shuffle(state);
    for(auto&& [a, b] : std::ranges::views::zip(result, state)) {
        a += b;
    }

    // Increment the counter.
    state[9] += uint32_t{++(state[8]) == 0};

    // Return the result.
    return result;
}

////////////////////////////////////////////////////////////////////////////////
// Generator definition.
////////////////////////////////////////////////////////////////////////////////

export struct generator {
    ////////////////////////////////////////////////////////////////////////////
    // Result type definition.
    ////////////////////////////////////////////////////////////////////////////

    using result_type = uint64_t;

    ////////////////////////////////////////////////////////////////////////////
    // Construction/destruction.
    ////////////////////////////////////////////////////////////////////////////

    constexpr generator(
        uint64_t seed = 0, std::array<uint32_t, 8> key = {0, 1, 3, 7}) noexcept
        : i_{}
        , state_{0x61707865, //
                 key[0],
                 key[1],
                 key[2],
                 key[3],
                 0x3320646E, //
                 static_cast<uint32_t>(seed >> 32),
                 static_cast<uint32_t>(seed),
                 0,
                 0,
                 0x79622D32, //
                 key[4],
                 key[5],
                 key[6],
                 key[7],
                 0x6B206574}
        , result_{} {
    }

    ////////////////////////////////////////////////////////////////////////////
    // Query interface.
    ////////////////////////////////////////////////////////////////////////////

    static constexpr auto
    min() noexcept -> result_type {
        return std::numeric_limits<result_type>::min();
    }

    static constexpr auto
    max() noexcept -> result_type {
        return std::numeric_limits<result_type>::max();
    }

    ////////////////////////////////////////////////////////////////////////////
    // Function call operator.
    ////////////////////////////////////////////////////////////////////////////

    constexpr auto
    operator()() noexcept -> result_type {
        if((this->i_ %= this->result_.size()) == 0) {
            this->result_ = permute<20>(this->state_);
        }

        auto a = this->result_[this->i_++];
        auto b = this->result_[this->i_++];

        return static_cast<result_type>(uint64_t{a} | (uint64_t{b} << 32));
    }

private:
    size_t i_;
    generator_state state_, result_;
};

static_assert(std::uniform_random_bit_generator<generator>);

} // namespace rose::random
